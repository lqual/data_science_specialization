set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)
[[1]]training = adData[ inTrain,]
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
names(training)
head(training[, 58:69])
q4 <- preProcess(training[, 58:69], method = "pca", thresh = .8)
q4
#question5
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training[, c(1, 58:69)]
head(training)
testing <- testing[, c(1, 58:69)]
mdl1 <- train(diagnosis ~ ., data = training, method = "glm")
#question5
library(caret)
mdl1 <- train(diagnosis ~ ., data = training, method = "glm")
install.packages('caret', dependencies = TRUE)
#question5
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training[, c(1, 58:69)]
testing <- testing[, c(1, 58:69)]
mdl1 <- train(diagnosis ~ ., data = training, method = "glm")
install.packages('e1071', dependencies=TRUE)
#question5
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training[, c(1, 58:69)]
testing <- testing[, c(1, 58:69)]
mdl1 <- train(diagnosis ~ ., data = training, method = "glm")
mdl1Outcome <- predict(mdl$finalModel, newdata = testing)
mdl1Outcome <- predict(mdl1$finalModel, newdata = testing)
summary(mdl1Outcome)
confusionMatrix(testing$diagnosis, predict(mdl1$finalModel, newdata = testing))
confusionMatrix(testing$diagnosis, predict(mdl1$finalModel, newdata = testing$diagnosis))
confusionMatrix(testing$diagnosis, predict(mdl1$finalModel, newdata = testing))
testing$diagnosis
confusionMatrix(factor(testing$diagnosis),
factor(predict(mdl1$finalModel, newdata = testing)))
testDiag <- testing$diagnosis
testMdl1 <- predict(mdl1$finalModel, newdata = testing)
confusionMatrix(factor(testDiag, levels = 1:82),
factor(testMdl1, levels = 1:82))
testDiag <- testing$diagnosis
testDiag
testMdl1
#question5
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training[, c(1, 58:69)]
testing <- testing[, c(1, 58:69)]
mdl1 <- train(diagnosis ~ ., data = training, method = "glm")
mdl1Outcome <- predict(mdl1$finalModel, newdata = testing)
ml1Outcome
mdl1Outcome
mdl1
RNGversion("3.0.0")
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training[, c(1, 58:69)]
testing <- testing[, c(1, 58:69)]
mdl1 <- train(diagnosis ~ ., data = training, method = "glm")
mdl1
testmdl1 <- predict(mdl1, testing)
testmdl1
confusionMatrix(testing$diagnosis, testmdl1)
mdl1$finalModel
mdlPCA <- train(diagnosis ~ ., data = training, method = "glm",
preProcess = "pca", thresh = .8)
trainPCA <- preProcess(training[, 58:69], method = "pca", thresh = .8)
head(training)
trainPCA <- preProcess(training[, 2:13], method = "pca", thresh = .8)
trainPCA
PCA <- preProcess(training[, 2:13], method = "pca", thresh = .8)
trainPCA <- predict(PCA, training)
head(trainPCA)
testPCA <- predict(PCA, testing)
mdlPCA <- train(diagnosis ~ ., data = trainPCA, method = "glm")
testmdlPCA <- predict(mdlPCA, testPCA)
confusionMatrix(testPCA$diagnosis, testmdlPCA)
#question1
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
training <- subset(segmentationOriginal$Case == "Train")
training <- subset(segmentationOriginal, Case == "Train")
head(training)
testing <- subset(segmentationOriginal, Case == "Test")
model <- train(Cell ~ ., method = "rpart", data = training)
model
a <- predict(model, data.frame("TotalIntench2" = 23,000, "FiberWidthCh1" = 10,
"PerimStatusCh1"=2))
set.seed(125)
model <- train(Class ~ ., method = "rpart", data = training)
a <- predict(model, data.frame("TotalIntench2" = 23,000, "FiberWidthCh1" = 10,
"PerimStatusCh1"=2))
model$finalModel
a <- predict(model$finalModel, data.frame("TotalIntench2" = 23,000, "FiberWidthCh1" = 10,
"PerimStatusCh1"=2))
install.packages("rattle")
library(rattle)
fancyRpartPlot(model$finalModel)
install.packages("pgmm")
#question3
library(pgmm)
data(olive)
olive = olive[,-1]
model <- train(Area ~ ., method = "rpart", data = olive)
predict <- predict(model, newdata = as.data.frame(t(colMeans(olive))))
predict
head(olive)
#question4
library(ElemStatLearn)
install.packages("ElemStatLearn")
#question4
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
head(trainSA)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
missClass(trainSA, predict(model, trainSA))
missClass(trainSA, model)
predict(model, trainSA)
predict(model, testSA)
set.seed(13234)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm")
trainSA$chd <- as.factor(trainSA$chd)
testSA$chd <- as.factor(testSA$chd)
set.seed(13234)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
predict(model, testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA, predict(model, testSA))
trainPredict <- as.integer(predict(model, trainSA))
trainPredict <- as.numeric(predict(model, trainSA))
trainPredict
predict(model, trainSA
)
trainPredict <- as.numeric(predict(model, trainSA)-1)
trainPredict <- as.numeric(predict(model, trainSA))-1
missClass(trainSA, trainPredict)
trainAnsw <- as.data.frame(c(trainSA$chd, trainPredict), c("Actual", "Prediction"))
trainAnsw <- as.data.frame(c(trainSA$chd, trainPredict))
head(tranAnsw)
head(trainAnsw)
trainPredict <- as.numeric(predict(model, trainSA))-1
trainAnsw <- as.data.frame(c(trainSA$chd, trainPredict))
head(trainAnsw)
trainSA$chd
trainPredict
trainAnsw <- as.data.frame(trainSA$chd, trainPredict)
trainAnsw <- cbind(trainSA, trainPredict)
head(trainAnsw)
library(dplyr)
trainAnsw <- trainAnsw %>% select(chd, trainPredict) %>% mutate(wrong = abs(chd - trainPredict))
trainAnsw <- trainAnsw %>% select(chd, trainPredict) %>%
mutate(wrong = abs(as.numberic(chd) - as.numeric(trainPredict)))
trainAnsw <- trainAnsw %>% select(chd, trainPredict) %>%
mutate(wrong = abs(as.numeric(chd) - as.numeric(trainPredict)))
head(trainAnsw)
trainAnsw <- cbind(trainSA, trainPredict)
trainAnsw$chd <- as.numeric(trainAnsw$chd)
trainAnsw$trainPredict <- as.numeric(trainAnsw$trainPredict)
trainAnsw <- trainAnsw %>% select(chd, trainPredict) %>%
mutate(wrong = abs(chd - trainPredict))
head(trainAnsw)
trainAnsw <- cbind(trainSA, trainPredict)
trainAnsw$chd <- as.numeric(trainAnsw$chd)-1
trainAnsw <- trainAnsw %>% select(chd, trainPredict) %>%
mutate(wrong = abs(chd - trainPredict))
head(trainAnsw)
trainAnsw <- trainAnsw %>% select(chd, trainPredict) %>%
mutate(wrong = abs(chd - trainPredict)) %>% pull(wrong)
head(trainAnsw)
sum(trainAnsw)/length(trainAnsw)
testPredict <- as.numeric(predict(model, testSA))-1
testAnsw <- cbind(testSA, testPredict)
testAnsw$chd <- as.numeric(testAnsw$chd)-1
testAnsw <- testAnsw %>% select(chd, testPredict) %>%
mutate(wrong = abs(chd - testPredict)) %>% pull(wrong)
sum(testAnsw)/length(testAnsw)
#question5
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.test)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
install.packages("randomForest")
library(randomForest)
?randomForest
randomForest(y ~ ., data = vowel.train)
model <- randomForest(y ~ ., data = vowel.train)
varImp(model)
imp <- varImp(model)
imp
answer <- imp[order(Overall), ]
imp <- imp %>% arrange(Overall)
imp
imp <- imp %>% mutate(variable = c(1:10))
imp <- varImp(model)
imp <- imp %>% mutate(variable = c(1:10))
ip
imp
imp <- imp %>% mutate(variable = c(1:10)) %>% arrange(desc(Overall))
imp
#question1
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.test)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
forestMdl <- train(y ~ ., data = vowel.train, method = "rf")
set.seed(33833)
library(caret)
forestMdl <- train(y ~ ., data = vowel.train, method = "rf")
boostMdl <- train(y ~ ., data = vowel.train, method = "gbm")
summary(boostMdl)
boostMdl
boostMdl$finalModel
predFor <- predict(forestMdl, vowel.train)
predBoost <- predict(boostMdl, vowel.train)
predDF <- data.frame(predFor, predBoost, vowel.train)
combModFit <- train(y ~ ., method = "gam", data = predDF)
combPred <- predict(combModFit, predDF)
predForTest <- predict(forestMdl, vowel.test)
predBoostTest <- predict(boostMdl, vowel.test)
predTestDF <- data.frame(predFor = predForTest, predBoost = predBoostTest)
combPredTest <- predict(combModFit, predTestDF)
head(predTestDF)
predFor <- predict(forestMdl, vowel.test)
predBoost <- predict(boostMdl, vowel.test)
confusionMatrix(predFor, vowel.test$y)
confusionMatrix(predBoost, vowel.test$y)
#forest = .5909
#boost = .513
agree <- data.frame(actual = vowel.test$y, forest = predFor, boost = predBoost)
head(agree)
library(dplyr)
agree <- agree %>% mutate(agree = ifelse(forest == boost, forest, 0))
head(agree)
agree <- agree %>% mutate(agree = ifelse(forest == boost, forest, 0)) %>%
filter(agree != "0")
head(agree)
tail(agree)
agree <- agree %>% mutate(agree = ifelse(forest == boost, forest, 0)) %>%
filter(agree != "0") %>% mutate(right = ifelse(agree == actual, 1, 0))
head(agree)
tail(agree)
right <- agree %>% pull(right)
sum(right)/length(right)
install.packages(parallel)
install.packages("parallel")
install.packages("doParallel")
#question2
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
set.seed(62433)
library(parallel)
library(doParallel)
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
fitControl <- trainControl(method = "cv", number = 5, allowParallel = TRUE)
fitrf <- train(diagnosis ~ ., data = training, method = "rf", trControl = fitControl)
fitgbm <- train(diagnosis ~ ., data = training, method = "gbm", trControl = fitControl)
fitlda <- train(diagnosis ~ ., data = training, method = "lda", trControl = fitControl)
predrf <- predict(fitrf, training)
predgbm <- predict(fitgbm, training)
predlda <- predict(fitlda, training)
predDF <- data.frame(predrf, predgbm, predlda, training$diagnosis)
head(predDF)
combFit <- train(training.diagnosis ~ ., method = "rf", data = predDF)
stopCluster(cluster)
registerDoSEQ()
finalrf <- predict(fitrf, testing)
finalgbm <- predict(fitgbm, testing)
finallda <- predict(fitlda, testing)
finalDF <- data.frame(finalrf, finalgbm, finallda, testing$diagnosis)
finalcomb <- predict(combFit, finalDF)
finalDF
confusionMatrix(finalcomb, testing$diagnosis)
length(testing$diagnosis)
length(finalcomb)
head(finalcomb)
head(predDF)
length(finalDF)
length(finalrf)
finalcomb <- predict(combFit, finalDF)
names(finalDF)
names(finalDF) <- c("finalrf" , "finalgbm", "finallda", "training.diagnosis")
names(finalDF)
finalcomb <- predict(combFit, finalDF)
names(predDF)
names(finalDF) <- c("predrf", "predgbm", "predlda", "training.diagnosis")
finalcomb <- predict(combFit, finalDF)
confusionMatrix(finalcomb, testing$diagnosis)
#.8293
confusionMatrix(finalrf, testing$diagnosis)
#.7927
confusionMatrix(finalgbm, testing$diagnosis)
#.7927
confusionMatrix(finallda, testing$diagnosis)
#question3
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
#question3
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
head(training)
fit <- train(CompressiveStrength ~ ., data = training, method = "lasso")
?plot.enet
plot(fit, xvar = "penalty")
?plot.enet
plot(fit, xvar = "step")
plot(fit, xvar = "fraction")
plot(fit$finalModel, xvar = "penalty", use.color = T)
setwd("~/R Directory/Machine_Learning")
#question4
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
?download.file
#question4
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv",
"gaData.csv")
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forecast")
library(lubridate) # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
head(training)
fit <- bats(visitsTumblr ~ ., data = training)
fit <- bats(training)
fit <- bats(training$date)
fit <- bats(tstrain)
fcast <- forecast(fit)
plot(fcast)
accuracy(fcast, testing)
?forecast
fcast
head(testing)
tail(training)
tail(testing)
fcast <- forecast(fit, h = (600-366), level = c(2.5, 97.5))
plot(fcast)
fcast
fcast <- forecast(fit, h = (600-366), level = 95)
head(fcast)
f\cast
fcast
plot(fcast)
lo <- fcast$lower
lo
head(testing)
actual <- testing$visitsTumblr
df <- data.frame(lo, hi, actual)
hi <- fcast$upper
actual <- testing$visitsTumblr
df <- data.frame(lo, hi, actual)
fcast <- forecast(fit, h = (601-366), level = 95)
lo <- fcast$lower
hi <- fcast$upper
actual <- testing$visitsTumblr
df <- data.frame(lo, hi, actual)
head(df)
names(df) <- c("lo", "hi", "actual")
head(df)
df <- df %>% mutate(above = ifelse(actual > hi, 1, 0),
below = ifelse(actual < lo, 1, 0))
head(df)
df <- df %>% mutate(above = ifelse(actual > hi, 1, 0),
below = ifelse(actual < lo, 1, 0)) %>%
mutate(outside = sum(above, below))
head(df)
df <- data.frame(lo, hi, actual)
names(df) <- c("lo", "hi", "actual")
library(dplyr)
df <- df %>% mutate(above = ifelse(actual > hi, 1, 0),
below = ifelse(actual < lo, 1, 0)) %>%
mutate(outside = above + below)
head(df)
tail(df)
total <- df %>% pull(outside)
sum(outside)
sum(total)
(length(total) - sum(total)) / length(total)
#question5
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
head(concrete)
set.seed(325)
library(e1071)
fit <- svm(CompressiveStrength ~ ., data = training)
predict <- predict(fit, testing)
predict
summary(predict)
rmse(training$CompressiveStrength, predict)
RMSE(training$CompressiveStrength, predict)
RMSE(testing$CompressiveStrength, predict)
#question2
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
#try#2
set.seed(62433)
library(parallel)
library(doParallel)
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
fitControl <- trainControl(method = "cv", number = 5, allowParallel = TRUE)
fitrf <- train(diagnosis ~ ., data = training, method = "rf", trControl = fitControl)
fitgbm <- train(diagnosis ~ ., data = training, method = "gbm", trControl = fitControl)
fitlda <- train(diagnosis ~ ., data = training, method = "lda", trControl = fitControl)
stopCluster(cluster)
registerDoSEQ()
finalrf <- predict(fitrf, testing)
finalgbm <- predict(fitgbm, testing)
finallda <- predict(fitlda, testing)
finalDF <- data.frame(finalrf, finalgbm, finallda, testing$diagnosis)
head(finalDF)
combFit <- train(testing.diagnosis ~ ., method = "rf", data = finalDF)
finalcomb <- predict(combFit, finalDF)
confusionMatrix(finalcomb, testing$diagnosis)
#.8293
confusionMatrix(finalrf, testing$diagnosis)
#.7927
confusionMatrix(finalgbm, testing$diagnosis)
#.7927
confusionMatrix(finallda, testing$diagnosis)
