exp(fit4$coefficients)
14.5/15.333333
#question 5
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- seq(0, 8 * pi, length = 20)
knots
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
splineTerms
n <- 500; x <- seq(0, 4 * pi, length = n); y <- sin(x) + rnorm(n, sd = .3)
splineTerms
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
head(splineTerms)
#question 6
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
fit6 <- lm(y ~ xMat - 1)
fit6
plot(fit6)
yhat <- predict(fit6)
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
summary(fit6)
#question 1
q1 <- shuttle %>% mutate(use2 = ifelse(use == "auto", 1, 0))
fit1 <- glm(use2 ~ wind - 1, family = "binomial", data = q1)
exp(fit1$coefficients)
#question 2
fit2 <- glm(use2 ~ wind + magn - 1, family = "binomial", data = q1)
exp(fit2$coefficients)
fit6 <- lm(y ~ xMat - 1)
summary(fit6)
2.03723-1.02416
#question 3
fit3 <- glm(1- use2 ~ wind - 1, family = "binomial", data = q1)
fit1$coefficients
fit3$coefficients
install.packages("caret")
install.packages("Hmisc")
#question 2
library(AppliedPredictiveModeling)
#question 2
install.packages(AppliedPredictiveModeling)
#question 2
install.packages("AppliedPredictiveModeling")
#question 2
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
qplot(CompressiveStrength, color = Cement, data = training)
ggplot(training, aes(y=CompressiveStrength, fill=Cement)) + geom_point()
qplot(CompressiveStrength, color = factor(Cement), data = training)
plot(training$CompressiveStrength, pch = 19, col = training$Cement)
plot(training$CompressiveStrength, pch = 19)
install.packages("Hmisc")
library(Hmisc)
head(training)
library(Hmisc)
training$Age <- cut2(training$Age, g = 5)
head(training)
plot(training$CompressiveStrength, pch = 19, col=training$Age)
training$FlyAsh <- cut2(training$FlyAsh, g = 5)
plot(training$CompressiveStrength, pch = 19, col=training$FlyAsh)
training$Cement <- cut2(training$Cement, g = 5)
plot(training$CompressiveStrength, pch = 19, col=training$Cement)
training$BlastFurnaceSlag <- cut2(training$BlastFurnaceSlag, g = 5)
plot(training$CompressiveStrength, pch = 19, col=training$BlastFurnaceSlag)
training$Water <- cut2(training$Water, g = 5)
plot(training$CompressiveStrength, pch = 19, col=training$Water)
training$Superplasticizer <- cut2(training$Superplasticizer, g = 5)
plot(training$CompressiveStrength, pch = 19, col=training$Superplasticizer)
training$CourseAggregate <- cut2(training$CourseAggregate, g = 5)
training$CoarseAggregate <- cut2(training$CoarseAggregate, g = 5)
plot(training$CompressiveStrength, pch = 19, col=training$CoarseAggregate)
training$FineAggregate <- cut2(training$FineAggregate, g = 5)
plot(training$CompressiveStrength, pch = 19, col=training$FineAggregate)
#question3
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
par(mfrow = c(2,1))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
par(mfrow = c(2,1), mar = c(2, 2, 2, 2))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer+1))
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer + 1))
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer + 1))
install.packages("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
#question4
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)
[[1]]training = adData[ inTrain,]
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
names(training)
head(training[, 58:69])
q4 <- preProcess(training[, 58:69], method = "pca", thresh = .8)
q4
#question5
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training[, c(1, 58:69)]
head(training)
testing <- testing[, c(1, 58:69)]
mdl1 <- train(diagnosis ~ ., data = training, method = "glm")
#question5
library(caret)
mdl1 <- train(diagnosis ~ ., data = training, method = "glm")
install.packages('caret', dependencies = TRUE)
#question5
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training[, c(1, 58:69)]
testing <- testing[, c(1, 58:69)]
mdl1 <- train(diagnosis ~ ., data = training, method = "glm")
install.packages('e1071', dependencies=TRUE)
#question5
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training[, c(1, 58:69)]
testing <- testing[, c(1, 58:69)]
mdl1 <- train(diagnosis ~ ., data = training, method = "glm")
mdl1Outcome <- predict(mdl$finalModel, newdata = testing)
mdl1Outcome <- predict(mdl1$finalModel, newdata = testing)
summary(mdl1Outcome)
confusionMatrix(testing$diagnosis, predict(mdl1$finalModel, newdata = testing))
confusionMatrix(testing$diagnosis, predict(mdl1$finalModel, newdata = testing$diagnosis))
confusionMatrix(testing$diagnosis, predict(mdl1$finalModel, newdata = testing))
testing$diagnosis
confusionMatrix(factor(testing$diagnosis),
factor(predict(mdl1$finalModel, newdata = testing)))
testDiag <- testing$diagnosis
testMdl1 <- predict(mdl1$finalModel, newdata = testing)
confusionMatrix(factor(testDiag, levels = 1:82),
factor(testMdl1, levels = 1:82))
testDiag <- testing$diagnosis
testDiag
testMdl1
#question5
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training[, c(1, 58:69)]
testing <- testing[, c(1, 58:69)]
mdl1 <- train(diagnosis ~ ., data = training, method = "glm")
mdl1Outcome <- predict(mdl1$finalModel, newdata = testing)
ml1Outcome
mdl1Outcome
mdl1
RNGversion("3.0.0")
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training[, c(1, 58:69)]
testing <- testing[, c(1, 58:69)]
mdl1 <- train(diagnosis ~ ., data = training, method = "glm")
mdl1
testmdl1 <- predict(mdl1, testing)
testmdl1
confusionMatrix(testing$diagnosis, testmdl1)
mdl1$finalModel
mdlPCA <- train(diagnosis ~ ., data = training, method = "glm",
preProcess = "pca", thresh = .8)
trainPCA <- preProcess(training[, 58:69], method = "pca", thresh = .8)
head(training)
trainPCA <- preProcess(training[, 2:13], method = "pca", thresh = .8)
trainPCA
PCA <- preProcess(training[, 2:13], method = "pca", thresh = .8)
trainPCA <- predict(PCA, training)
head(trainPCA)
testPCA <- predict(PCA, testing)
mdlPCA <- train(diagnosis ~ ., data = trainPCA, method = "glm")
testmdlPCA <- predict(mdlPCA, testPCA)
confusionMatrix(testPCA$diagnosis, testmdlPCA)
#question1
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
training <- subset(segmentationOriginal$Case == "Train")
training <- subset(segmentationOriginal, Case == "Train")
head(training)
testing <- subset(segmentationOriginal, Case == "Test")
model <- train(Cell ~ ., method = "rpart", data = training)
model
a <- predict(model, data.frame("TotalIntench2" = 23,000, "FiberWidthCh1" = 10,
"PerimStatusCh1"=2))
set.seed(125)
model <- train(Class ~ ., method = "rpart", data = training)
a <- predict(model, data.frame("TotalIntench2" = 23,000, "FiberWidthCh1" = 10,
"PerimStatusCh1"=2))
model$finalModel
a <- predict(model$finalModel, data.frame("TotalIntench2" = 23,000, "FiberWidthCh1" = 10,
"PerimStatusCh1"=2))
install.packages("rattle")
library(rattle)
fancyRpartPlot(model$finalModel)
install.packages("pgmm")
#question3
library(pgmm)
data(olive)
olive = olive[,-1]
model <- train(Area ~ ., method = "rpart", data = olive)
predict <- predict(model, newdata = as.data.frame(t(colMeans(olive))))
predict
head(olive)
#question4
library(ElemStatLearn)
install.packages("ElemStatLearn")
#question4
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
head(trainSA)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
missClass(trainSA, predict(model, trainSA))
missClass(trainSA, model)
predict(model, trainSA)
predict(model, testSA)
set.seed(13234)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm")
trainSA$chd <- as.factor(trainSA$chd)
testSA$chd <- as.factor(testSA$chd)
set.seed(13234)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
predict(model, testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA, predict(model, testSA))
trainPredict <- as.integer(predict(model, trainSA))
trainPredict <- as.numeric(predict(model, trainSA))
trainPredict
predict(model, trainSA
)
trainPredict <- as.numeric(predict(model, trainSA)-1)
trainPredict <- as.numeric(predict(model, trainSA))-1
missClass(trainSA, trainPredict)
trainAnsw <- as.data.frame(c(trainSA$chd, trainPredict), c("Actual", "Prediction"))
trainAnsw <- as.data.frame(c(trainSA$chd, trainPredict))
head(tranAnsw)
head(trainAnsw)
trainPredict <- as.numeric(predict(model, trainSA))-1
trainAnsw <- as.data.frame(c(trainSA$chd, trainPredict))
head(trainAnsw)
trainSA$chd
trainPredict
trainAnsw <- as.data.frame(trainSA$chd, trainPredict)
trainAnsw <- cbind(trainSA, trainPredict)
head(trainAnsw)
library(dplyr)
trainAnsw <- trainAnsw %>% select(chd, trainPredict) %>% mutate(wrong = abs(chd - trainPredict))
trainAnsw <- trainAnsw %>% select(chd, trainPredict) %>%
mutate(wrong = abs(as.numberic(chd) - as.numeric(trainPredict)))
trainAnsw <- trainAnsw %>% select(chd, trainPredict) %>%
mutate(wrong = abs(as.numeric(chd) - as.numeric(trainPredict)))
head(trainAnsw)
trainAnsw <- cbind(trainSA, trainPredict)
trainAnsw$chd <- as.numeric(trainAnsw$chd)
trainAnsw$trainPredict <- as.numeric(trainAnsw$trainPredict)
trainAnsw <- trainAnsw %>% select(chd, trainPredict) %>%
mutate(wrong = abs(chd - trainPredict))
head(trainAnsw)
trainAnsw <- cbind(trainSA, trainPredict)
trainAnsw$chd <- as.numeric(trainAnsw$chd)-1
trainAnsw <- trainAnsw %>% select(chd, trainPredict) %>%
mutate(wrong = abs(chd - trainPredict))
head(trainAnsw)
trainAnsw <- trainAnsw %>% select(chd, trainPredict) %>%
mutate(wrong = abs(chd - trainPredict)) %>% pull(wrong)
head(trainAnsw)
sum(trainAnsw)/length(trainAnsw)
testPredict <- as.numeric(predict(model, testSA))-1
testAnsw <- cbind(testSA, testPredict)
testAnsw$chd <- as.numeric(testAnsw$chd)-1
testAnsw <- testAnsw %>% select(chd, testPredict) %>%
mutate(wrong = abs(chd - testPredict)) %>% pull(wrong)
sum(testAnsw)/length(testAnsw)
#question5
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.test)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
install.packages("randomForest")
library(randomForest)
?randomForest
randomForest(y ~ ., data = vowel.train)
model <- randomForest(y ~ ., data = vowel.train)
varImp(model)
imp <- varImp(model)
imp
answer <- imp[order(Overall), ]
imp <- imp %>% arrange(Overall)
imp
imp <- imp %>% mutate(variable = c(1:10))
imp <- varImp(model)
imp <- imp %>% mutate(variable = c(1:10))
ip
imp
imp <- imp %>% mutate(variable = c(1:10)) %>% arrange(desc(Overall))
imp
install.packages("leaflet")
df <- data.frame(lat = runif(200, min = 31.93, max = 36.83),
lng = runif(200, min = -108.98, max = -103.19),
type = sample(c("gold", "silver", "diamonds"),
200, replace = TRUE),
value = runif(200, min = 0.5, max = 100))
head(df)
df <- data.frame(lat = runif(200, min = 31.93, max = 36.83),
lng = runif(200, min = -108.98, max = -103.19),
type = sample(c("gold", "silver", "diamonds"),
200, replace = TRUE),
value = round(runif(200, min = 0.5, max = 50), digits = 1))
head(df)
tail(df)
df %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(value * 30))
library(leaflet)
df %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(value * 30))
df %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(df$value * 30))
df %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = df$value * 30)
df %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = df$value * 100)
library(dplyr)
colors()
df %>% mutate(color = ifelse(type == "gold", "yellow",
ifelse(type == "silver", "grey", "blue")))
df %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = df$value * 100, color = df$color,
popup = df$value)
df %>% mutate(color = ifelse(type == "gold", "yellow",
ifelse(type == "silver", "grey", "blue")))
df %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = df$value * 100, color = color,
popup = df$value)
df %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = df$value * 100, color = df$color,
popup = df$value)
df <- data.frame(lat = runif(200, min = 31.93, max = 36.83),
lng = runif(200, min = -108.98, max = -103.19),
type = sample(c("gold", "silver", "diamonds"),
200, replace = TRUE),
value = round(runif(200, min = 0.5, max = 50), digits = 1))
df %>% mutate(color = colorFactor(ifelse(type == "gold", "yellow",
ifelse(type == "silver", "grey", "blue"))))
df <- data.frame(lat = runif(200, min = 31.93, max = 36.83),
lng = runif(200, min = -108.98, max = -103.19),
type = sample(c("gold", "silver", "diamonds"),
200, replace = TRUE),
value = round(runif(200, min = 0.5, max = 50), digits = 1))
df %>% mutate(color = ifelse(type == "gold", "yellow",
ifelse(type == "silver", "grey", "blue")))
df %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = df$value * 100, color = ~color,
popup = ~value)
df %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = df$value * 100, color = df$color,
popup = df$value)
pal <- colorFactor(palette = c("yellow", "grey", "blue"),
levels = c("gold", "silver", "diamonds"))
df <- data.frame(lat = runif(200, min = 31.93, max = 36.83),
lng = runif(200, min = -108.98, max = -103.19),
type = sample(c("gold", "silver", "diamonds"),
200, replace = TRUE),
value = round(runif(200, min = 0.5, max = 50), digits = 1))
df %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = df$value * 100, color = pal(df$color),
popup = df$value)
df %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = df$value * 100, color = pal(df$type),
popup = df$value)
pal <- colorFactor(palette = c("red", "green", "blue"),
levels = c("gold", "silver", "diamonds"))
df %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = df$value * 100, color = pal(df$type),
popup = paste("Value in $1,000,000", "<br>", df$value))
df %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = df$value * 100, color = pal(df$type),
popup = paste("$", df$value, "million"))
df <- data.frame(lat = runif(200, min = 31.93, max = 36.83),
lng = runif(200, min = -108.98, max = -103.19),
type = sample(c("gold", "silver", "diamonds"),
200, replace = TRUE),
value = round(runif(200, min = 1, max = 100), digits = 1))
pal <- colorFactor(palette = c("red", "green", "blue"),
levels = c("gold", "silver", "diamonds"))
df %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = df$value * 100, color = pal(df$type),
popup = paste("$", df$value, "million"))
df <- data.frame(lat = runif(200, min = 31.93, max = 36.83),
lng = runif(200, min = -108.98, max = -103.19),
type = sample(c("gold", "silver", "diamonds"),
200, replace = TRUE),
value = round(runif(200, min = 0.25, max = 10), digits = 1))
pal <- colorFactor(palette = c("red", "green", "blue"),
levels = c("gold", "silver", "diamonds"))
df %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = df$value * 1000, color = pal(df$type),
popup = paste("$", df$value, "million"))
df %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = df$value * 1000, color = pal(df$type),
popup = paste("$", df$value, "million")) %>%
addLegend(labels = c("Gold", "Silver", "Diamonds"),
colors = c("red", "green", "blue"))
setwd("~/R Directory/Data_Products")
