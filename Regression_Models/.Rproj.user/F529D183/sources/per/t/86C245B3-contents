---
title: "Is an Exponential Distribution a Normal Distribution?"
author: "Lucas Qualmann"
date: "9/23/2019"
output:
  pdf_document: default
  html_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Overview

This report will show how exponential distributions fall under the normal distribution category.  To show this, we will look at the means, variance, and distribution of 1,000 means of 40 random exponential numbers and compare them to the expected values.

## Simulations

First we need to run a simulation.  The simulation will be 1,000 numbers, but they will be generated by taking the mean of 40 random exponential numbers with lambda (the rate) set to 0.2.

```{r}
#simulation for 1000 averages of 40 random exponentials
set.seed(4000)
rmeans = NULL
for(i in 1:1000) {
        rmeans <- c(rmeans, mean(rexp(40, 0.2)))
}
```

## Simulation Mean vs Theoretical Mean

Now we would like to compare the sample mean to the theoretical mean.  The plot below shows a histogram showing the density of observations of the simulation.  We can figure out the simulation mean by simply taking the mean of the simulation data.  The theoretical mean is simply 1/lambda (1/0.2) Included on the plot is both the simulation and theoretical mean and the density curve.

```{r,echo=FALSE, fig.width=5, fig.height=3.5}
#comparing means of simulations
par(mar = c(4,4,2,1))
hist(rmeans, col = "yellow", xlab = "Number", freq = FALSE,
     main = "Simulated Data Density")
abline(v = mean(rmeans), col = "red", lwd = 2)
abline(v = 1/0.2, col = "green", lwd = 2, lty = 2)
x.mean <- seq(2, 8, length.out=100)
y.mean <- dnorm(x.mean, mean(rmeans), sd(rmeans))
lines(x.mean, y.mean, col = "blue", lwd = 2, lty = 2)
legend("topright", legend = c("Simulation Mean", "Theoretical Mean", 
                              "Density Curve"), cex = 0.75,
       col = c("red", "green", "blue"), lwd = c(1, 2, 2), lty = c(1, 2, 2))
```

As you can see from the plot, both means are near 5.  This shows that the simulation mean is very close to what we'd expect.

```{r, echo=FALSE}
means <- data.frame("Statistic" = c("Theoretical Mean", "Simulation Mean"), 
                    "Mean" = c(1/0.2, mean(rmeans)))
print(means)
```

This table shows the actual values of the means.  Notice how the difference between the two is less than .02.  This shows how close the means are to each other

## Simulation Variance vs Theoretical Variance

Now we want to see how the variances are different between the simulation and theoretical.  For this, we will look at the standard deviation which is the square root of the variance, since it is easier to chart.  We'll look at the same plot as before, only we'll show 1 standard deviation above and below the mean for the simulation and the theoretical.

```{r, echo=FALSE, fig.width=5, fig.height=3.5}
#comparing variances
hist(rmeans, col = "yellow", xlab = "Number", freq = FALSE, xlim = c(0, 10),
     main = "Simulated Data Density")
x.mean <- seq(2, 8, length.out=100)
y.mean <- dnorm(x.mean, mean(rmeans), sd(rmeans))
lines(x.mean, y.mean, col = "blue", lwd = 2, lty = 2)
abline(v = mean(rmeans) - sd(rmeans), col = "red", lwd = 2, lty = 2)
abline(v = mean(rmeans) + sd(rmeans), col = "red", lwd = 2, lty = 2)
abline(v = 1/0.2 - 1/0.2, col = "green", lwd = 2, lty = 2)
abline(v = 1/0.2 + 1/0.2, col = "green", lwd = 2, lty = 2)
legend("topright", legend = c("Simulation SD", "Theoretical SD", 
                              "Density Curve"), cex = 0.75,
       col = c("red", "green", "blue"), lwd = c(1, 2, 2), lty = c(1, 2, 2))
```

As you can see, there is a huge difference in the standard deviations.  Theoretically, the standard deviation should be 5, whereas the actual standard deviation is less than 1 as the table below shows.

```{r, echo=FALSE}
sds <- data.frame("Statistic" = c("Theoretical Mean", "Simulation Mean"), 
                  "Standard Deviation" = c(1/0.2, sd(rmeans)))
print(sds)
```

The actual standard deviation is 0.77.  Why is that?  This occurred due to the fact we are looking at the mean of 40 random exponential numbers and not actual exponential numbers.  If we compare the standard deviation of the simulated data to the standard error (sd/sqrt(40)), we end up with a value of 0.79, which is really close to the standard deviation of the simulated data.

```{r}
print(1/0.2/sqrt(40))
```

## Distribution

Finally we want to prove the central limit theorem applies for exponential numbers by showing our simulation data forms a normal distribution.  As you can see in the plots above, the density curve forms a bell curve, so that would imply a normal distribution.  To take it one final step, let's look at the percentage of values that fall in 1-3 standard deviations for the 1,000 means dataset and compare it to the percentage that should fall into those levels in a regular normal distribution.

```{r, echo=FALSE}
#prove normal distribution
sd1low <- mean(rmeans) - sd(rmeans)
sd2low <- mean(rmeans) - 2*sd(rmeans)
sd3low <- mean(rmeans) - 3*sd(rmeans)
sd1high <- mean(rmeans) + sd(rmeans)
sd2high <- mean(rmeans) + 2*sd(rmeans)
sd3high <- mean(rmeans) + 3*sd(rmeans)
sd1percent <- length(which(rmeans <= sd1high & rmeans >=sd1low))/length(rmeans)
sd2percent <- length(which(rmeans <= sd2high & rmeans >=sd2low))/length(rmeans)
sd3percent <- length(which(rmeans <= sd3high & rmeans >=sd3low))/length(rmeans)
dist <- data.frame("Standard_Deviations" = c(1, 2, 3), 
                   "Normal_Distribution" = c(.68, .95, .99),
                   "Simulation_Percents" = c(sd1percent, sd2percent, sd3percent))
print(dist)
```

Just about perfect!  68.5% of the simulation values fall within 1 standard deviation of the mean which is right in line with the 68% that we would expect if it was a normal distribution.  The same holds true for both 2 and 3 standard deviations from the mean.  Both the eyetest and the actual range of values compared to the standard deviation both show how exponential numbers fall under a normal distribution. 

# Appendix

## R Code

```{r, eval=FALSE}
#simulation for 1000 averages of 40 random exponentials
set.seed(4000)
rmeans = NULL
for(i in 1:1000) {
        rmeans <- c(rmeans, mean(rexp(40, 0.2)))
}

#comparing means of simulations
par(mar = c(4,4,2,1))
hist(rmeans, col = "yellow", xlab = "Number", freq = FALSE,
     main = "Simulated Data Density")
abline(v = mean(rmeans), col = "red", lwd = 2)
abline(v = 1/0.2, col = "green", lwd = 2, lty = 2)
x.mean <- seq(2, 8, length.out=100)
y.mean <- dnorm(x.mean, mean(rmeans), sd(rmeans))
lines(x.mean, y.mean, col = "blue", lwd = 2, lty = 2)
legend("topright", legend = c("Simulation Mean", "Theoretical Mean", 
                              "Density Curve"), cex = 0.75,
       col = c("red", "green", "blue"), lwd = c(1, 2, 2), lty = c(1, 2, 2))

means <- data.frame("Statistic" = c("Theoretical Mean", "Simulation Mean"), 
                    "Mean" = c(1/0.2, mean(rmeans)))
print(means)

#comparing variances
hist(rmeans, col = "yellow", xlab = "Number", freq = FALSE, xlim = c(0, 10),
     main = "Simulated Data Density")
x.mean <- seq(2, 8, length.out=100)
y.mean <- dnorm(x.mean, mean(rmeans), sd(rmeans))
lines(x.mean, y.mean, col = "blue", lwd = 2, lty = 2)
abline(v = mean(rmeans) - sd(rmeans), col = "red", lwd = 2, lty = 2)
abline(v = mean(rmeans) + sd(rmeans), col = "red", lwd = 2, lty = 2)
abline(v = 1/0.2 - 1/0.2, col = "green", lwd = 2, lty = 2)
abline(v = 1/0.2 + 1/0.2, col = "green", lwd = 2, lty = 2)
legend("topright", legend = c("Simulation SD", "Theoretical SD", 
                              "Density Curve"), cex = 0.75,
       col = c("red", "green", "blue"), lwd = c(1, 2, 2), lty = c(1, 2, 2))

sds <- data.frame("Statistic" = c("Theoretical Mean", "Simulation Mean"), 
                  "Standard Deviation" = c(1/0.2, sd(rmeans)))
print(sds)

print(1/0.2/sqrt(40))

#prove normal distribution
sd1low <- mean(rmeans) - sd(rmeans)
sd2low <- mean(rmeans) - 2*sd(rmeans)
sd3low <- mean(rmeans) - 3*sd(rmeans)
sd1high <- mean(rmeans) + sd(rmeans)
sd2high <- mean(rmeans) + 2*sd(rmeans)
sd3high <- mean(rmeans) + 3*sd(rmeans)
sd1percent <- length(which(rmeans <= sd1high & rmeans >=sd1low))/length(rmeans)
sd2percent <- length(which(rmeans <= sd2high & rmeans >=sd2low))/length(rmeans)
sd3percent <- length(which(rmeans <= sd3high & rmeans >=sd3low))/length(rmeans)
dist <- data.frame("Standard_Deviations" = c(1, 2, 3), 
                   "Normal_Distribution" = c(.68, .95, .99),
                   "Simulation_Percents" = c(sd1percent, sd2percent, sd3percent))
print(dist)
```

## R Session Info

```{r}
print(sessionInfo())
```
